"use strict";(self.webpackChunkarclix_docs=self.webpackChunkarclix_docs||[]).push([[932],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),m=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=m(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=m(n),d=a,f=c["".concat(l,".").concat(d)]||c[d]||u[d]||r;return n?o.createElement(f,p(p({ref:t},s),{},{components:n})):o.createElement(f,p({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,p=new Array(r);p[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,p[1]=i;for(var m=2;m<r;m++)p[m]=n[m];return o.createElement.apply(null,p)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6820:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var o=n(7462),a=(n(7294),n(3905));const r={},p="Custom Templates (coming soon)",i={unversionedId:"arclix-configuration/custom-templates",id:"arclix-configuration/custom-templates",title:"Custom Templates (coming soon)",description:"Custom Templates feature is still in development and testing and will be released as part of v0.1.6",source:"@site/docs/arclix-configuration/custom-templates.md",sourceDirName:"arclix-configuration",slug:"/arclix-configuration/custom-templates",permalink:"/arclix-docs/docs/arclix-configuration/custom-templates",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dynamic component types",permalink:"/arclix-docs/docs/arclix-configuration/dynamic-component-types"}},l={},m=[{value:"<code>name</code> property in <code>customTemplate</code> (coming soon)",id:"name-property-in-customtemplate-coming-soon",level:3}],s={toc:m},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"custom-templates-coming-soon"},"Custom Templates (coming soon)"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Custom Templates feature is still in development and testing and will be released as part of ",(0,a.kt)("inlineCode",{parentName:"p"},"v0.1.6"))),(0,a.kt)("p",null,"Arclix config offers a unique feature that let's you provide your own custom templates instead of the default templates provided by Arclix."),(0,a.kt)("p",null,"To get started with custom templates you would need ",(0,a.kt)("inlineCode",{parentName:"p"},"arclix.config.json")," config file setup in your react project."),(0,a.kt)("p",null,"Example property model for custom templates feature:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "customTemplate": {\n        "component": "<path to component template>",\n        "style": "<path to style template>",\n        "test": "<path to test template>",\n        "story": "<path to story template>"\n    }\n}\n')),(0,a.kt)("p",null,"Also the whole component structure should have the name ",(0,a.kt)("inlineCode",{parentName:"p"},"TemplateName")," like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"TemplateName\n\u251c\u2500\u2500 TemplateName.css\n\u251c\u2500\u2500 TemplateName.tsx\n\u251c\u2500\u2500 TemplateName.test.tsx\n\u2514\u2500\u2500 TemplateName.stories.tsx\n")),(0,a.kt)("p",null,"Basically arclix would replace ",(0,a.kt)("inlineCode",{parentName:"p"},"TemplateName")," in the custom template you provide in the config with the component you want to generate."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx arclix g c Hero\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "generate": {\n        "default": {\n            "customTemplate": {\n                "component": "../TemplateName.tsx",\n                "style": "../TemplateName.css",\n                "test": "../TemplateName.test.tsx",\n                "story": "../TemplateName.stories.tsx"\n            }\n            // other configurations...\n        }\n    }\n}\n')),(0,a.kt)("p",null,"So for the above command with the above config properties arclix will replace wherever the word ",(0,a.kt)("inlineCode",{parentName:"p"},"TemplateName")," is used in the templates with ",(0,a.kt)("inlineCode",{parentName:"p"},"Hero")," and generate the component."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"customTemplate")," property is optional like other config properties and also the properties of ",(0,a.kt)("inlineCode",{parentName:"p"},"customTemplate")," are also optional, so you can provide custom template for the items you want and other properties which was not defined under ",(0,a.kt)("inlineCode",{parentName:"p"},"customTemplate")," in the config would use default templates provided by arclix.")),(0,a.kt)("h3",{id:"name-property-in-customtemplate-coming-soon"},(0,a.kt)("inlineCode",{parentName:"h3"},"name")," property in ",(0,a.kt)("inlineCode",{parentName:"h3"},"customTemplate")," (coming soon)"),(0,a.kt)("p",null,"This feature even enhances the above feature where the user need to have separate component ",(0,a.kt)("inlineCode",{parentName:"p"},"TemplateName")," and the only purpose of the ",(0,a.kt)("inlineCode",{parentName:"p"},"TemplateName")," component is to provide templates which takes up space."),(0,a.kt)("p",null,"So the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," property provides the user with two option ",(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," and user defined name."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"dynamic")," - this takes the component name from the template path provided in config and replaces it with the name provided while generation."),(0,a.kt)("p",{parentName:"li"},"For example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "customTemplate": {\n        "name": "dynamic",\n        "component": "../HeroAction.tsx",\n        "style": "../HeroAction.css",\n        "test": "../HeroAction.test.tsx",\n        "story": "../HeroAction.stories.tsx"\n    }\n}\n')),(0,a.kt)("blockquote",{parentName:"li"},(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Note:")," Here the component name used in the templates is ",(0,a.kt)("inlineCode",{parentName:"p"},"HeroAction")," based on the general practice of naming the component file the same as component function, so ",(0,a.kt)("inlineCode",{parentName:"p"},"HeroAction")," will be replaced with name provided while generation."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Custom Name")," - this can be used whe your project doesn't follow the practice of naming the component file the same as component function. So the component name provided for ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," property will be replaced with the component name provided in the generation."),(0,a.kt)("p",{parentName:"li"},"For example:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "customTemplate": {\n        "name": "Hero",\n        "component": "../HeroAction.tsx",\n        "style": "../HeroAction.css",\n        "test": "../HeroAction.test.tsx",\n        "story": "../HeroAction.stories.tsx"\n    }\n}\n')),(0,a.kt)("p",{parentName:"li"},"Here the ",(0,a.kt)("inlineCode",{parentName:"p"},"HeroAction.tsx")," file will have component function named ",(0,a.kt)("inlineCode",{parentName:"p"},"Hero"),", so component name ",(0,a.kt)("inlineCode",{parentName:"p"},"Hero")," will be replaced by the component name provided while generation."))))}u.isMDXComponent=!0}}]);